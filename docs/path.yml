
components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
      description: Bad Request
    DuplicateEmailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DuplicateEmail'  
      description: Duplicate Email Error   
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'  
      description: Forbidden Error
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
      description: Not Found Error
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
      description: Unauthorized Error
  schemas:
    Address:
      properties:
        addressLine1:
          description: The primary address line.
          type: string
        addressLine2:
          description: The secondary address line (optional).
          type: string
        city:
          description: The city of the address.
          type: string
        country:
          description: The country of the address.
          type: string
        createdAt:
          description: The date and time when the address was created.
          format: date-time
          type: string
        phone:
          description: The phone number associated with the address (optional).
          type: string
        postalCode:
          description: The postal code of the address.
          type: string
        state:
          description: The state of the address.
          type: string
        updatedAt:
          description: The date and time when the address was last updated.
          format: date-time
          type: string
        userId:
          description: The ID of the user associated with this address.
          format: uuid
          type: string
      type: object
    ApiResponse:
      properties:
        data:
          type: object
        message:
          type: string
        status:
          type: integer
      type: object
    BadRequest:
      properties:
        message:
          example: Bad request.
          type: string
      type: object
    Banner:
      example:
        id: '1'
        images:
        - imageUrl1
        - imageUrl2
        name: Fake Banner Name
        type: other
      properties:
        id:
          description: Banner ID 
          type: string
        images:
          items:
            format: binary
            type: string
          type: array
        name:
          description: Name of the banner
          type: string
        type:
          description: Type of the banner (sale or other)
          type: string
      required:
      - name
      - type
      type: object
    BannerSet:
      properties:
        __v:
          example: 0
          type: integer
        active:
          example: true
          type: boolean
        bannerName:
          example: Banner Name
          type: string
        createdAt:
          example: '2024-01-29T07:29:33.340Z'
          format: date-time
          type: string
        device:
          example: web
          type: string
        id:
          example: 65b753dde8a15c34f04a1764
          type: string
        location:
          example: Location Name
          type: string
        slug:
          example: banner-name-12345
          type: string
        type:
          example: slider
          type: string
        updatedAt:
          example: '2024-01-29T07:29:33.340Z'
          format: date-time
          type: string
      type: object
    BannerSetCreate:
      properties:
        active:
          example: false
          type: boolean
        bannerName:
          example: abc
          type: string
        device:
          example: web
          type: string
        location:
          example: test
          type: string
        type:
          example: slider
          type: string
      required:
      - bannerName
      - location
      - active
      - type
      - device
      type: object
    BannerSetResponse:
      properties:
        data:
          $ref: '#/components/schemas/BannerSet'
        message:
          example: Created successfully.
          type: string
        status:
          example: 200
          type: integer
      type: object
    Category:
      properties:
        description:
          type: string
        gallery:
          items:
            type: string
          type: array
        id:
          type: string
        mainImage:
          type: string
        name:
          type: string
      type: object
    CategoryPost:
      properties:
        description:
          type: string
        gallery:
          example:
          - imageUrl1
          - imageUrl2
          - imageUrl3
          items:
            type: string
          type: array
        mainImage:
          format: binary
          type: string
        name:
          type: string
      type: object
    CreateAction:
      properties:
        action:
          type: string
        reportId:
          type: string
      required:
      - reportId
      - action
      type: object
    CreateAddressInput:
      properties:
        addressLine1:
          description: The primary address line.
          type: string
        addressLine2:
          description: The secondary address line (optional).
          type: string
        city:
          description: The city of the address.
          type: string
        country:
          description: The country of the address.
          type: string
        phone:
          description: The phone number associated with the address (optional).
          type: string
        postalCode:
          description: The postal code of the address.
          type: string
        state:
          description: The state of the address.
          type: string
      type: object
    CreateAnswer:
      properties:
        answer:
          type: string
      required:
      - answer
      type: object
    CreateProduct:
      allOf:
      - $ref: '#/components/schemas/Product'
      - properties:
          productName:
            example: New Product
            type: string
        required:
        - productName
        type: object
    CreateQuestion:
      properties:
        productId:
          type: string
        question:
          type: string
      required:
      - productId
      - question
      type: object
    CreateReport:
      properties:
        comment:
          type: string
        type:
          type: string
        typeId:
          type: string
      required:
      - type
      - typeId
      type: object
    CreateTableRequest:
      properties:
        active:
          type: boolean
        dataType:
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - DATE
          type: string
        description:
          type: string
        key:
          type: string
        keyValue:
          type: string
        label:
          type: string
        unit:
          type: string
      required:
      - key
      - keyValue
      - label
      - description
      type: object
    CreateTableResponse:
      properties:
        __v:
          example: 0
          type: integer
        active:
          example: true
          type: boolean
        createdAt:
          example: '2024-02-29T07:21:58.162Z'
          format: date-time
          type: string
        dataType:
          example: string
          type: string
        description:
          example: testing testing
          type: string
        id:
          example: 65e0309610a07a1a246be1f9
          type: string
        key:
          example: PRICE
          type: string
        keyValue:
          example: '200'
          type: string
        label:
          example: price
          type: string
        updatedAt:
          example: '2024-02-29T07:21:58.162Z'
          format: date-time
          type: string
      type: object
    DuplicateEmail:
      properties:
        message:
          example: Email already in use.
          type: string
      type: object
    FilterTableResponse:
      properties:
        data:
          items:
            properties:
              __v:
                example: 0
                type: integer
              active:
                example: true
                type: boolean
              createdAt:
                example: '2024-02-29T07:21:58.162Z'
                format: date-time
                type: string
              dataType:
                example: string
                type: string
              description:
                example: testing testing
                type: string
              id:
                example: 65e0309610a07a1a246be1f9
                type: string
              key:
                example: PRICE
                type: string
              keyValue:
                example: '200'
                type: string
              label:
                example: price
                type: string
              updatedAt:
                example: '2024-02-29T07:21:58.162Z'
                format: date-time
                type: string
            type: object
          type: array
      type: object
    Forbidden:
      properties:
        message:
          example: You do not have permission to access this resource.
          type: string
      type: object
    GenerateAliasPayload:
      properties:
        fullDb:
          description: Whether to generate alias for the full database
          type: boolean
        id:
          description: ID of the seller detail
          type: string
      type: object
    NotFound:
      properties:
        message:
          example: Resource not found.
          type: string
      type: object
    Order:
      properties:
        address:
          description: Reference ID to the address used for the order.
          type: string
        adminDiscount:
          description: Discount applied by admin.
          type: number
        code:
          properties:
            code:
              description: Code for discount.
              type: string
            codeType:
              description: Type of discount code.
              type: string
            id:
              description: ID related to the code.
              type: string
            totalAmount:
              description: Total discount amount.
              type: number
          type: object
        customer:
          description: Reference ID to the customer user.
          type: string
        discount:
          description: Discount applied to the order.
          type: number
        groupBuy:
          description: Indicates if the order is part of a group buy.
          type: boolean
        groupBuyId:
          description: Group buy ID.
          type: string
        groupBuyQuantity:
          description: Quantity for the group buy.
          type: number
        orderAddress:
          additionalProperties: true
          description: Address details of the order.
          type: object
        orderDate:
          description: Date when the order was placed.
          format: date-time
          type: string
        orderDetail:
          description: Reference ID to the order detail.
          type: string
        orderId:
          description: Unique identifier for the order.
          type: string
        orderItems:
          description: List of IDs for items in the order.
          items:
            type: string
          type: array
        orderNote:
          description: Additional notes related to the order.
          type: string
        orderStatus:
          description: Status ID of the order.
          type: string
        payable:
          description: Total amount payable for the order.
          type: number
        payableShippment:
          description: Payable shipping amount.
          type: number
        paymentMethod:
          description: Payment method selected.
          enum:
          - COD
          - COD_WALLET
          - WALLET_CARD
          - WALLET
          - CARD
          type: string
        paymentMethodTotal:
          description: Total amount for the selected payment method.
          type: number
        refCode:
          description: Reference code for discounts or offers.
          type: string
        retailTotal:
          description: Retail total of the order.
          type: number
        seller:
          description: Reference ID to the seller user.
          type: string
        shippment:
          description: Reference ID to the shipment.
          type: string
        shippmentCharges:
          description: Shipping charges for the order.
          type: number
        statusUpdatedAt:
          description: Date when the status was last updated.
          format: date-time
          type: string
        store:
          additionalProperties: true
          description: Store information.
          type: object
        subTotal:
          description: Subtotal cost of the order items.
          type: number
        subWeight:
          description: Total weight of order items.
          type: number
        vendor:
          additionalProperties: true
          description: Vendor information.
          type: object
        wallet:
          description: Indicates if the wallet was used.
          type: boolean
      type: object
    PackageInfo:
      properties:
        volume:
          properties:
            height:
              example: 10
              type: number
            length:
              example: 30
              type: number
            unit:
              default: NONE
              enum:
              - NONE
              - CUBIC_FEET
              - LITERS
              type: string
            width:
              example: 20
              type: number
          type: object
        weight:
          example: 5.5
          type: number
      type: object
    Product:
      properties:
        active:
          example: true
          type: boolean
        attributes:
          items:
            type: object
          type: array
        category:
          example: 6045d336513d358144a144de
          type: string
        description:
          example: Product description here
          type: string
        featured:
          example: false
          type: boolean
        gallery:
          items:
            example: https://example.com/gallery1.jpg
            type: string
          type: array
        isVariable:
          example: true
          type: boolean
        lang:
          properties:
            ar:
              properties:
                description:
                  example: "\u0648\u0635\u0641 \u0627\u0644\u0645\u0646\u062A\u062C\
                    \ \u0628\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
                  type: string
                productName:
                  example: "\u0627\u0633\u0645 \u0627\u0644\u0645\u0646\u062A\u062C\
                    \ \u0628\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
                  type: string
              type: object
          type: object
        mainImage:
          example: https://example.com/image.jpg
          type: string
        onSale:
          example: false
          type: boolean
        packageInfo:
          $ref: '#/components/schemas/PackageInfo'
        price:
          example: 100.0
          type: number
        productName:
          example: Sample Product
          type: string
        quantity:
          example: 50
          type: number
        regularPrice:
          example: 100.0
          type: number
        salePrice:
          example: 90.0
          type: number
        selectedAttributes:
          items:
            type: object
          type: array
        sku:
          example: SKU12345
          type: string
        sku_attribute:
          example: color
          type: string
        slug:
          example: sample-product
          type: string
        user:
          example: 6045d047513d358144a144bf
          type: string
        warranty:
          $ref: '#/components/schemas/Warranty'
        weight:
          example: 1.5
          type: number
      type: object
    ProductPost:
      properties:
        message:
          example: Product created successfully
          type: string
        product:
          $ref: '#/components/schemas/Product'
      type: object
    ProductSearchResult:
      properties:
        _id:
          example: 6045d8df513d358144a14553
          type: string
        active:
          example: true
          type: boolean
        category:
          example: 6045d336513d358144a144de
          type: string
        categoryTree:
          items:
            example: 6045d305513d358144a144da
            type: string
          type: array
        createdAt:
          example: '2021-03-08T07:57:19.905Z'
          format: date-time
          type: string
        description:
          example: Cotton, dimensions, age suitability, etc.
          type: string
        mainImage:
          example: https://example.com/mainImage.jpg
          type: string
        price:
          example: 1299
          type: number
        productName:
          example: Cat Mosquito Bed Net Yellow
          type: string
        slug:
          example: Cat-Mosquito-Bed-Net-Yellow
          type: string
        updatedAt:
          example: '2024-04-04T06:26:27.128Z'
          format: date-time
          type: string
      type: object
    RedeemVoucher:
      properties:
        amount:
          description: Amount for the voucher
          type: number
        couponType:
          description: Type of coupon (e.g., percentage, fixed amount)
          enum:
          - percentage
          - fixed
          - '...'
          type: string
        orderId:
          description: Order ID associated with the voucher redemption
          type: string
        quantity:
          default: 1
          description: Quantity of vouchers redeemed
          type: integer
        typeId:
          description: Type ID associated with the voucher
          type: string
        userId:
          description: User ID of the person redeeming the voucher
          type: string
        voucherId:
          description: Voucher ID being redeemed
          type: string
      type: object
    ReportResponse:
      properties:
        action:
          type: string
        comment:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        type:
          type: string
        typeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          type: string
      required:
      - action
      - typeId
      - comment
      - userId
      - type
      - createdAt
      - updatedAt
      - id
      type: object
    Review:
      properties:
        comment:
          properties:
            comment:
              maxLength: 500
              type: string
            dateTime:
              format: date-time
              type: string
          type: object
        id:
          type: string
        images:
          items:
            type: string
          type: array
        orderId:
          type: string
        productId:
          type: string
        rating:
          maximum: 5
          minimum: 1
          type: integer
        reported:
          enum:
          - PENDING
          - BLOCKED
          - NONE
          type: string
        response:
          properties:
            dateTime:
              format: date-time
              type: string
            response:
              maxLength: 500
              type: string
          type: object
        reviewType:
          enum:
          - PRODUCT
          - SUPPLIER
          type: string
        reviewer:
          properties:
            fullname:
              type: string
            id:
              type: string
          type: object
        sellerDetailId:
          type: string
        sellerId:
          type: string
      type: object
    RrpParserPayload:
      properties:
        storeId:
          type: string
      type: object
    SearchCollectionSchema:
      properties:
        fieldName:
          description: Name of the field
          type: string
        fieldType:
          description: Type of the field
          enum:
          - string
          - int
          - float
          - bool
          type: string
      type: object
    SellerConfidentialDetailPayload:
      properties:
        bankAccountNumber:
          example: '1234567890'
          type: string
        bankAccountTitle:
          example: John Doe
          type: string
        bankName:
          example: ABC Bank
          type: string
        cnic_no:
          example: '1234567890123'
          type: string
        seller:
          example: 60b63b47de13d03759b7016f
          type: string
      type: object
    SellerDetailResponse:
      properties:
        data:
          properties:
            __v:
              example: 0
              type: integer
            address:
              example: Example Address
              type: string
            alias:
              example: ExampleBrand
              type: string
            approved:
              example: true
              type: boolean
            brandName:
              example: Example Brand
              type: string
            city:
              example: Example City
              type: string
            cityCode:
              example: '12345'
              type: string
            costCenterCode:
              example: tRyqkq3b
              type: string
            costCode:
              example: false
              type: boolean
            country:
              example: Pakistan
              type: string
            createdAt:
              example: '2024-02-07T09:20:43.897Z'
              format: date-time
              type: string
            description:
              example: Example description
              type: string
            id:
              example: 65c34b6b24f14029fcbe9e36
              type: string
            images:
              items:
                type: string
              type: array
            market:
              nullable: true
              type: string
            rrp:
              example: EB411045
              type: string
            seller:
              example: 654372929fd4ba2dc4751941
              type: string
            slug:
              example: example-brand
              type: string
            updatedAt:
              example: '2024-02-07T09:20:43.897Z'
              format: date-time
              type: string
          type: object
        message:
          example: ok
          type: string
        status:
          example: 200
          type: integer
      type: object
    
    SellerDetailRequest:
      type: object
      properties:
        address:
          type: string
        brandName:
          type: string
        city:
          type: string
        cityCode:
          type: string
        description:
          type: string
        lang:
          type: object
          properties:
            en:
              type: object
              properties:
                brandName:
                  type: string
                description:
                  type: string
        market:
          type: string
        seller:
          type: string
    Unauthorized:
      properties:
        message:
          example: Unauthorized access.
          type: string
      type: object
    UpdateAddressInput:
      properties:
        addressLine1:
          description: The primary address line.
          type: string
        addressLine2:
          description: The secondary address line (optional).
          type: string
        city:
          description: The city of the address.
          type: string
        country:
          description: The country of the address.
          type: string
        phone:
          description: The phone number associated with the address (optional)
          type: string
        postalCode:
          description: The postal code of the address.
          type: string
        state:
          description: The state of the address.
          type: string
      type: object
    UpdateSellerDetailPayload:
      properties:
        address:
          description: Address
          type: string
        brandName:
          description: Brand name
          type: string
        city:
          description: City name
          type: string
        cityCode:
          description: City code
          type: string
        description:
          description: Description
          type: string
        lang:
          additionalProperties:
            properties:
              brandName:
                type: string
              description:
                type: string
            type: object
          type: object
        market:
          description: Market ID
          type: string
      type: object
    UpdateSlugPayload:
      properties:
        id:
          description: ID of the seller detail to update
          type: string
      type: object
    UpdateTableByIdRequest:
      properties:
        active:
          type: boolean
        dataType:
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - DATE
          type: string
        description:
          type: string
        key:
          type: string
        keyValue:
          type: string
        label:
          type: string
        unit:
          type: string
      type: object
    User:
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
      type: object
    Warranty:
      properties:
        warrantyPeriod:
          properties:
            tenure:
              example: 12
              type: number
            unit:
              default: NONE
              enum:
              - NONE
              - MONTHS
              - YEARS
              type: string
          type: object
        warrantyType:
          default: NONE
          enum:
          - NONE
          - LIMITED
          - EXTENDED
          type: string
      type: object
    createMarket:
      properties:
        description:
          example: Market Description
          type: string
        image:
          type: string
        lang:
          additionalProperties:
            properties:
              description:
                type: string
              name:
                type: string
            type: object
          type: object
        mainMarket:
          description: ObjectId of the main market
          format: ObjectId
          type: string
        name:
          example: Market Name
          type: string
        slug:
          type: string
        type:
          default: MAIN_MARKET
          enum:
          - MAIN_MARKET
          - SUB_MARKET
          type: string
      type: object
    updateMarket:
      properties:
        description:
          example: Updated Market Description
          type: string
        lang:
          additionalProperties:
            properties:
              description:
                type: string
              name:
                type: string
            type: object
          type: object
        name:
          example: Updated Market Name
          type: string
      type: object
    Voucher:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        voucher:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        amount:
          type: number
        status:
          type: string
        discountType:
          type: string
        type:
          type: string
        couponType:
          type: string
        couponTypeId:
          type: string
        numOfVouchers:
          type: integer
        limit:
          type: integer
        quantity:
          type: integer
        remainingVoucher:
          type: integer
        lang:
          type: object
    AddToWishList:
      type: object
      required:
        - product
      properties:
        product:
          type: string
          description: The product ID to be added to the wishlist
      example:
        product: "5ebac534954b54139806c112"
    WishList:
      type: object
      properties:
        products:
          type: array
          items:
            type: string
            example: "6045d677513d358144a14521"
        user:
          type: string
          example: "65c5c64cfb588a26f0683540"
        createdAt:
          type: string
          format: date-time
          example: "2024-02-09T06:30:49.682Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-02-09T06:30:49.682Z"
        id:
          type: string
          example: "65c5c699fb588a26f0683543"
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  description: API documentation for your mysouq.
  title: mysouq
  version: 1.0.0
openapi: 3.0.0
paths:
    
  /address:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Address'
                type: array
          description: A list of addresses.
        '401':
          description: Unauthorized.
      security:
      - bearerAuth: []
      summary: Get all Addresses
      tags:
      - Address
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressInput'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Address created successfully.
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
      security:
      - bearerAuth: []
      summary: Create user Address
      tags:
      - Address
  /address/admin/{phone}:
    delete:
      responses:
        '204':
          description: Address deleted successfully.
        '401':
          description: Unauthorized.
        '404':
          description: Address not found.
      security:
      - bearerAuth: []
      summary: Delete Address as admin
      tags:
      - Address
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: Address retrieved successfully.
        '401':
          description: Unauthorized.
        '404':
          description: Address not found.
      security:
      - bearerAuth: []
      summary: Get Address by admin
      tags:
      - Address
    parameters:
    - description: Phone number to get or modify address.
      in: path
      name: phone
      required: true
      schema:
        type: string
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Address updated successfully.
        '401':
          description: Unauthorized.
        '404':
          description: Address not found.
      security:
      - bearerAuth: []
      summary: Update Address as admin
      tags:
      - Address
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressInput'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Address created successfully.
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
      security:
      - bearerAuth: []
      summary: Create Address as admin
      tags:
      - Address
  /address/cities:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: A list of cities.
        '401':
          description: Unauthorized.
      security:
      - bearerAuth: []
      summary: Get all Cities
      tags:
      - Address
  /analytics:
    get:
      description: Retrieve overall analytics data
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  productStats:
                    properties:
                      active:
                        example: 169898
                        type: integer
                      inactive:
                        example: 2423
                        type: integer
                      main:
                        example: 97475
                        type: integer
                      totalProducts:
                        example: 172431
                        type: integer
                      variant:
                        example: 74956
                        type: integer
                    type: object
                  totalSales:
                    example: 44855700
                    type: integer
                  totalUsers:
                    example: 24849
                    type: integer
                type: object
          description: Successful response with analytics data
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get overall analytics
      tags:
      - Analytics
  /analytics/monthly:
    get:
      description: Retrieve monthly analytics data
      parameters:
      - description: Date in YYYY-MM-DD format.
        in: query
        name: date
        required: true
        schema:
          format: date
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  orders:
                    properties:
                      averageOrderValue:
                        example: 3973
                        format: float
                        type: number
                      currMonthOrders:
                        properties:
                          confirmed:
                            example: 3
                            type: integer
                          delivered:
                            example: 2
                            type: integer
                          new:
                            example: 70
                            type: integer
                          ready:
                            example: 3
                            type: integer
                        type: object
                      currMonthSales:
                        example: 278075
                        type: integer
                      currMonthTotalOrders:
                        example: 70
                        type: integer
                      prevMonthOrders:
                        properties:
                          cancel:
                            example: 7
                            type: integer
                          completed:
                            example: 1
                            type: integer
                          confirmed:
                            example: 3
                            type: integer
                          delivered:
                            example: 1
                            type: integer
                          new:
                            example: 68
                            type: integer
                          ready:
                            example: 2
                            type: integer
                        type: object
                      prevMonthSales:
                        example: 362320
                        type: integer
                      prevMonthTotalOrders:
                        example: 68
                        type: integer
                    type: object
                  products:
                    properties:
                      currMonthProducts:
                        example: 3
                        type: integer
                      prevMonthProducts:
                        example: 13
                        type: integer
                    type: object
                  users:
                    properties:
                      currMonthTotalUsers:
                        example: 43
                        type: integer
                      currMonthUsers:
                        properties:
                          admin:
                            example: 2
                            type: integer
                          requestedSeller:
                            example: 17
                            type: integer
                          supplier:
                            example: 4
                            type: integer
                          u:
                            example: 1
                            type: integer
                          user:
                            example: 19
                            type: integer
                        type: object
                      session:
                        properties:
                          null:
                            example: 31
                            type: integer
                          customer-app:
                            example: 3
                            type: integer
                          web-desktop:
                            example: 8
                            type: integer
                          seller-app:
                            example: 1
                            type: integer
                        type: object
                    type: object
                type: object
          description: Successful response with monthly analytics data
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get monthly analytics
      tags:
      - Analytics
  /analytics/ordersChart:
    get:
      description: Retrieve data for orders chart
      parameters:
      - description: Start date in YYYY-MM-DD format.
        in: query
        name: startDate
        required: true
        schema:
          format: date
          type: string
      - description: End date in YYYY-MM-DD format.
        in: query
        name: endDate
        required: true
        schema:
          format: date
          type: string
      - description: Format for the chart (day or month)
        in: query
        name: format
        required: true
        schema:
          enum:
          - day
          - month
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      properties:
                        x:
                          properties:
                            date:
                              example: 1
                              type: integer
                            month:
                              example: 11
                              type: integer
                            year:
                              example: 2022
                              type: integer
                          type: object
                        y:
                          example: 55
                          type: integer
                      type: object
                    type: array
                  isSuccess:
                    example: true
                    type: boolean
                  message:
                    example: Orders Chart
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successful response with orders chart data
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get orders chart data
      tags:
      - Analytics
  /auth/email-verification:
    post:
      parameters:
      - description: The verify email token
        in: query
        name: token
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
        '401':
          content:
            application/json:
              example:
                code: 401
                message: Verify email failed
              schema:
                $ref: '#/components/schemas/Unauthorized'
          description: Verify email failed
      summary: Verify Email
      tags:
      - Auth
  /auth/forgot-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  message:
                    example: Password reset email sent.
                    type: string
                type: object
          description: Password reset email sent.
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Request a password reset
      tags:
      - Auth
  /auth/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                type: object
          description: User logged in successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Log in a user
      tags:
      - Auth
  /auth/login/user:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                type: object
          description: User logged in successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Log in a user
      tags:
      - Auth
  /auth/logout:
    post:
      responses:
        '204':
          description: Successfully logged out.
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      security:
      - bearerAuth: []
      summary: Log out a user
      tags:
      - Auth
  /auth/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User registered successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/DuplicateEmailResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-code:
    post:
      requestBody:
        content:
          application/json:
            schema:
              example:
                email: fake@example.com
              properties:
                email:
                  format: email
                  type: string
              required:
              - email
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                data:
                  user:
                    $ref: '#/components/schemas/User'
                    tokens:
                      access:
                        expires: '2024-01-15T15:33:07.237Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh:
                        expires: '2026-07-03T10:03:07.243Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                message: OK
                status: 200
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
      summary: Email to get verification code
      tags:
      - Auth
  /auth/reset-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                token:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  message:
                    example: Password reset successfully.
                    type: string
                type: object
          description: Password reset successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Reset user password
      tags:
      - Auth
  /auth/send-verification:
    post:
      description: An email will be sent to verify email.
      requestBody:
        content:
          application/json:
            schema:
              example:
                email: fake@example.com
              properties:
                email:
                  format: email
                  type: string
              required:
              - email
              type: object
        required: true
      responses:
        '204':
          description: No content
      security:
      - bearerAuth: []
      summary: Verify Email
      tags:
      - Auth
  /auth/verify-email:
    post:
      parameters:
      - description: The email verification code
        in: query
        name: emailCode
        required: true
        schema:
          type: string
      responses:
        '201':
          content:
            application/json:
              example:
                data:
                  user:
                    $ref: '#/components/schemas/User'
                    tokens:
                      access:
                        expires: '2024-01-15T15:33:07.237Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh:
                        expires: '2026-07-03T10:03:07.243Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                message: OK
                status: 200
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Resend Email Verification Code
      tags:
      - Auth
  /auth/verify-phone:
    post:
      requestBody:
        content:
          application/json:
            schema:
              example:
                phoneToken: eyJhbGciOiJSUzI1NiIsImtpZCI6ImFkNWM1Z...
              properties:
                phoneToken:
                  format: string
                  type: string
              required:
              - phoneToken
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                data:
                  user:
                    $ref: '#/components/schemas/User'
                    tokens:
                      access:
                        expires: '2024-01-15T15:33:07.237Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh:
                        expires: '2026-07-03T10:03:07.243Z'
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                message: OK
                status: 200
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Verify Phone
      tags:
      - Auth
  /banner-set:
    get:
      description: Retrieve all BannerSets.
      parameters:
      - description: The name of the banner.
        in: query
        name: bannerName
        schema:
          type: string
      - description: Sorting parameter.
        in: query
        name: sortBy
        schema:
          type: string
      - description: Number of items to return per page.
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number.
        in: query
        name: page
        schema:
          type: integer
      - description: Name for search filtering.
        in: query
        name: name
        schema:
          type: string
      - description: Value for search filtering.
        in: query
        name: value
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      limit:
                        type: integer
                      page:
                        type: integer
                      results:
                        items:
                          $ref: '#/components/schemas/BannerSet'
                        type: array
                      totalPages:
                        type: integer
                      totalResults:
                        type: integer
                    type: object
                  message:
                    type: string
                  status:
                    type: integer
                type: object
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get all BannerSets
      tags:
      - BannerSet
    post:
      description: Only admins can create BannerSet.
      requestBody:
        content:
          application/json:
            example:
              active: false
              bannerName: abc
              device: web
              location: test
              type: slider
            schema:
              $ref: '#/components/schemas/BannerSetCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Created successfully.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Create a new BannerSet
      tags:
      - BannerSet
  /banner-set/admin:
    get:
      description: Only admins can retrieve all BannerSets.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully retrieved BannerSets.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get all BannerSets for admin
      tags:
      - BannerSet
  /banner-set/{bannerId}:
    delete:
      description: Only admins can delete BannerSet.
      parameters:
      - in: path
        name: bannerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully deleted BannerSet.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Delete a BannerSet by ID
      tags:
      - BannerSet
    get:
      description: Anyone can get BannerSet by ID.
      parameters:
      - in: path
        name: bannerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully retrieved BannerSet.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get BannerSet by ID
      tags:
      - BannerSet
  /banner-set/{bannerSetId}/admin:
    get:
      description: Only admins can get BannerSet and Banners by ID.
      parameters:
      - in: path
        name: bannerSetId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully retrieved BannerSet and Banners for admin.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get BannerSet and Banners for admin by ID
      tags:
      - BannerSet
  /banner-set/{bannerSetId}/banner-set:
    get:
      description: Anyone can get BannerSet and Banners by ID.
      parameters:
      - in: path
        name: bannerSetId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully retrieved BannerSet and Banners.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get BannerSet and Banners by ID
      tags:
      - BannerSet
  /banner-set/{slug}:
    get:
      description: Anyone can get BannerSet by slug.
      parameters:
      - in: path
        name: slug
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerSetResponse'
          description: Successfully retrieved BannerSet.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get BannerSet by slug
      tags:
      - BannerSet
  /banners:
    get:
      description: Retrieve all Banners.
      parameters:
      - description: Banner name
        in: query
        name: name
        schema:
          type: string
      - description: Banner type should be (sale or other)
        in: query
        name: type
        schema:
          type: string
      - description: sort by query in the form of field:desc/asc (ex. name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Maximum number of banners
        in: query
        name: limit
        schema:
          default: 10
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  page:
                    example: 1
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/Banner'
                    type: array
                  totalPages:
                    example: 1
                    type: integer
                  totalResults:
                    example: 1
                    type: integer
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Forbidden'
      summary: Get Paginated Banners
      tags:
      - Banners
    post:
      description: Only admin can create a banner and banners type should be sale
        or other.
      requestBody:
        content:
          application/json:
            example:
              name: fake banner name
              type: other
            schema:
              $ref: '#/components/schemas/Banner'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Create a banner
      tags:
      - Banners
  /banners/{id}:
    delete:
      description: Admin can delete a banner.
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Unauthorized'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Delete a banner
      tags:
      - Banners
    get:
      description: Fetching banner by ID.
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      summary: Get a banner
      tags:
      - Banners
    patch:
      description: Logged in admin users can only update banners.
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                name: fake Banner name
                removeImages:
                - imageUrl1
                - imageUrl2
                type: sale
              properties:
                images:
                  items:
                    format: binary
                    type: string
                  type: array
                name:
                  type: string
                removeImages:
                  items:
                    type: string
                  type: array
                type:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Update a banner
      tags:
      - Banners
    post:
      description: Only admin can upload and remove banner images.
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              example:
                images:
                - imageUrl1
                - imageUrl2
              properties:
                images:
                  items:
                    format: binary
                    type: string
                  type: array
                removeImages:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Upload banner images
      tags:
      - Banners
  /cart:
    delete:
      responses:
        '204':
          description: Item removed from cart successfully
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Remove item from cart
      tags:
      - Cart
    get:
      responses:
        '200':
          description: Successfully retrieved cart items
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Retrieve cart items
      tags:
      - Cart
    patch:
      responses:
        '200':
          description: Cart item updated successfully
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Update item in cart
      tags:
      - Cart
    post:
      responses:
        '200':
          description: Cart updated successfully
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Add item to cart
      tags:
      - Cart
  /cart/addPackageToCart:
    post:
      responses:
        '200':
          description: Package added to cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Add package to cart
      tags:
      - Cart
  /cart/admin:
    delete:
      responses:
        '204':
          description: Admin removed item from cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Admin remove item from cart
      tags:
      - Cart
    patch:
      responses:
        '200':
          description: Admin updated item in cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Admin update item in cart
      tags:
      - Cart
    post:
      responses:
        '200':
          description: Admin added item to cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Admin add item to cart
      tags:
      - Cart
  /cart/admin/payment:
    post:
      responses:
        '200':
          description: Payment processed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Admin process payment
      tags:
      - Cart
  /cart/admin/payment-method:
    post:
      responses:
        '200':
          description: Payment method added successfully
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Admin add payment method
      tags:
      - Cart
  /cart/removePackageFromCart:
    post:
      responses:
        '204':
          description: Package removed from cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Remove package from cart
      tags:
      - Cart
  /cart/unloadPackageFromCart:
    post:
      responses:
        '204':
          description: Package unloaded from cart
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/BadRequest'
      security:
      - bearerAuth: []
      summary: Unload package from cart
      tags:
      - Cart
  /categories:
    get:
      description: Retrieve all Categories.
      parameters:
      - description: Category name
        in: query
        name: name
        schema:
          type: string
      - description: Sort by query in the form of field:desc/asc (e.g., name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Maximum number of categories
        in: query
        name: limit
        required: false
        schema:
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        required: false
        schema:
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  page:
                    example: 1
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/Category'
                    type: array
                  totalPages:
                    example: 1
                    type: integer
                  totalResults:
                    example: 1
                    type: integer
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      summary: Get Paginated Categories
      tags:
      - Categories
    post:
      description: Only admin can create category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPost'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Create a Category
      tags:
      - Categories
  /categories/getAllCategories:
    get:
      description: Retrieve all Categories.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      summary: Get All Categories
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Only admin can delete the category.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Delete a Category
      tags:
      - Categories
    get:
      description: Fetching category by ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Get a category
      tags:
      - Categories
    patch:
      description: Only Admin can update the category.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: Fake description
                gallery:
                - imageUrl1
                - imageUrl2
                - imageUrl3
                name: Fake Category Name
              properties:
                description:
                  type: string
                gallery:
                  example:
                  - imageUrl1
                  - imageUrl2
                  - imageUrl3
                  items:
                    type: string
                  type: array
                mainImage:
                  format: binary
                  type: string
                name:
                  type: string
                removeImages:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Update a category
      tags:
      - Categories
    post:
      description: Only admin can update category images.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              example:
                gallery:
                - imageUrl1
                - imageUrl2
                - imageUrl3
                removeImages:
                - imageUrl1
              properties:
                gallery:
                  example:
                  - imageUrl1
                  - imageUrl2
                  - imageUrl3
                  items:
                    type: string
                  type: array
                mainImage:
                  format: binary
                  type: string
                removeImages:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
      - bearerAuth: []
      summary: Upload Category Images
      tags:
      - Categories
  /collection:
    get:
      parameters:
      - description: Limit the number of collections returned
        in: query
        name: limit
        schema:
          type: integer
      - description: Specify the page number
        in: query
        name: page
        schema:
          type: integer
      - description: Filter collections by name
        in: query
        name: name
        schema:
          type: string
      - description: Filter collections by activation status
        in: query
        name: active
        schema:
          type: boolean
      - description: Key to search in collection details
        in: query
        name: searchKey
        schema:
          type: string
      - description: Value to search in collection details
        in: query
        name: searchValue
        schema:
          type: string
      - description: Sort collections by a field
        in: query
        name: sortBy
        schema:
          type: string
      responses:
        '200':
          description: Successfully retrieved list of collections
      summary: Get a list of collections
      tags:
      - Collection
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                collectionImage:
                  description: Collection images
                  example:
                  - image1.jpg
                  - image2.jpg
                  items:
                    type: string
                  type: array
                description:
                  description: Description of the collection
                  example: A new collection
                  maxLength: 120
                  minLength: 10
                  type: string
                expireDate:
                  description: Date when the collection expires
                  example: '2024-12-31'
                  format: date
                  type: string
                lang:
                  description: Language data
                  example:
                    language: English
                  type: object
                name:
                  description: Name of the collection
                  example: New Collection
                  maxLength: 30
                  minLength: 3
                  type: string
              required:
              - name
              - description
              - expireDate
              - lang
              - collectionImage
              type: object
        required: true
      responses:
        '200':
          description: Successfully created a new collection
      security:
      - bearerAuth: []
      summary: Create a new collection
      tags:
      - Collection
  /collection/csv/{collectionId}:
    post:
      parameters:
      - description: ID of the collection to update with CSV file
        in: path
        name: collectionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                csvFile:
                  description: CSV file containing product data
                  example: content of CSV file
                  format: binary
                  type: string
              required:
              - csvFile
              type: object
        required: true
      responses:
        '200':
          description: Successfully created a collection from CSV file
      security:
      - bearerAuth: []
      summary: Create a collection from a CSV file
      tags:
      - Collection
  /collection/{collectionId}:
    delete:
      parameters:
      - description: ID of the collection to delete
        in: path
        name: collectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted the collection
      security:
      - bearerAuth: []
      summary: Delete a collection by ID
      tags:
      - Collection
    get:
      parameters:
      - description: ID of the collection to retrieve
        in: path
        name: collectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully retrieved collection details
      summary: Get details of a collection by ID
      tags:
      - Collection
    patch:
      parameters:
      - description: ID of the collection to update
        in: path
        name: collectionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                active:
                  description: Set to true to activate the collection
                  example: true
                  type: boolean
                collectionImage:
                  description: New collection images
                  example:
                  - new_image1.jpg
                  - new_image2.jpg
                  items:
                    type: string
                  type: array
                deleteProducts:
                  description: IDs of products to be removed from the collection
                  example:
                  - product1
                  - product2
                  items:
                    type: string
                  type: array
                description:
                  description: New description of the collection
                  example: An updated collection
                  maxLength: 120
                  minLength: 10
                  type: string
                expireDate:
                  description: New date when the collection expires
                  example: '2025-12-31'
                  format: date
                  type: string
                lang:
                  description: New language data
                  example:
                    language: French
                  type: object
                name:
                  description: New name of the collection
                  example: Updated Collection
                  maxLength: 30
                  minLength: 3
                  type: string
              required:
              - name
              - description
              - expireDate
              type: object
        required: true
      responses:
        '200':
          description: Successfully updated the collection
      security:
      - bearerAuth: []
      summary: Update a collection by ID
      tags:
      - Collection
  /follow:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                followed:
                  description: ID of the user/store to be followed
                  example: 5fd0b0f530a3c1369e0c0ecf
                  format: objectId
                  type: string
                web:
                  description: Indicator for web follow
                  example: true
                  type: boolean
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      followed:
                        example: 605c41a1adbdf45dbed41767
                        type: string
                    type: object
                  message:
                    example: ok
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successfully created a new follow
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Create a new follow
      tags:
      - Follow
  /follow/getFollowersCount:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  description: ID of the user/store to get follower count
                  example: 5fd0b0f530a3c1369e0c0ecf
                  format: objectId
                  type: string
                seller:
                  description: Indicator for seller
                  example: true
                  type: boolean
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    example: 1
                    type: integer
                  message:
                    example: ok
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successfully retrieved follower count
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Get the follower count
      tags:
      - Follow
  /follow/unfollow/{storeId}:
    post:
      parameters:
      - description: ID of the store to unfollow
        in: path
        name: storeId
        required: true
        schema:
          format: objectId
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  __v:
                    example: 0
                    type: integer
                  data:
                    properties:
                      followed:
                        properties:
                          __v:
                            example: 0
                            type: integer
                          createdAt:
                            example: '2021-03-25T07:54:09.135Z'
                            type: string
                          email:
                            example: syedsaadjawed@gmail.com
                            type: string
                          fullname:
                            example: Humna Handicrafts
                            type: string
                          isEmailVerified:
                            example: false
                            type: boolean
                          isPhoneVerified:
                            example: true
                            type: boolean
                          phone:
                            example: '03530123456'
                            type: string
                          role:
                            example: supplier
                            type: string
                          sellerDetail:
                            properties:
                              approved:
                                example: true
                                type: boolean
                              brandName:
                                example: Humna Handicrafts
                                type: string
                              costCode:
                                example: false
                                type: boolean
                              country:
                                example: Pakistan
                                type: string
                              description:
                                example: '&lt;p>Hamna Handicrafts&lt;/p>'
                                type: string
                              id:
                                example: 6066bc0245c30c40c2df8fec
                                type: string
                              images:
                                items:
                                  example: https://cdn.bazaarghar.com/1617345561645aaaaa.jpeg
                                  type: string
                                type: array
                              market:
                                properties:
                                  __v:
                                    example: 0
                                    type: integer
                                  createdAt:
                                    example: '2021-03-26T08:57:31.728Z'
                                    type: string
                                  description:
                                    example: Bazaarghar brings you Zainab Market with
                                      a wide range of Products that were not available
                                      online before
                                    type: string
                                  image:
                                    example: https://bazar-247.s3.us-east-2.amazonaws.com/1616752686295zainabbazaar.jpg
                                    type: string
                                  lang:
                                    properties:
                                      ar:
                                        properties:
                                          description:
                                            example: testing
                                            type: string
                                          name:
                                            example: test
                                            type: string
                                        type: object
                                    type: object
                                  mainMarket:
                                    example: 605da14836c5f4023c12d89f
                                    type: string
                                  name:
                                    example: Zainab Market
                                    type: string
                                  type:
                                    example: sub
                                    type: string
                                  updatedAt:
                                    example: '2023-11-07T07:50:28.408Z'
                                    type: string
                                type: object
                              subMarkets:
                                items:
                                  type: object
                                type: array
                            type: object
                          updatedAt:
                            example: '2022-03-25T13:05:55.726Z'
                            type: string
                          userType:
                            example: local
                            type: string
                          wallet:
                            properties:
                              balance:
                                example: 200
                                type: integer
                            type: object
                        type: object
                      id:
                        example: 605c41a1adbdf45dbed41767
                        type: string
                      refCode:
                        example: 3tUAb
                        type: string
                    type: object
                  follower:
                    properties:
                      __v:
                        example: 0
                        type: integer
                      createdAt:
                        example: '2021-06-01T13:51:03.397Z'
                        type: string
                      defaultAddress:
                        properties:
                          __v:
                            example: 0
                            type: integer
                          address:
                            example: vintega solutions
                            type: string
                          addressType:
                            example: home
                            type: string
                          city:
                            example: Ajnianwala
                            type: string
                          city_code:
                            example: AJN
                            type: string
                          createdAt:
                            example: '2021-06-04T06:03:59.324Z'
                            type: string
                          fullname:
                            example: safi siddiqui
                            type: string
                          id:
                            example: 60b9c24f9e93337e122e2a20
                            type: string
                          localType:
                            example: local
                            type: string
                          phone:
                            example: '03011171415'
                            type: string
                          province:
                            example: punjab
                            type: string
                          updatedAt:
                            example: '2021-06-04T06:03:59.324Z'
                            type: string
                          user:
                            example: 60b63b47de13d03759b7016f
                            type: string
                        type: object
                      email:
                        example: safi@vintegasolutions.com
                        type: string
                      fullname:
                        example: safi siddiqui
                        type: string
                      isEmailVerified:
                        example: false
                        type: boolean
                      isPhoneVerified:
                        example: false
                        type: boolean
                      refCode:
                        example: 2H0Cf
                        type: string
                      role:
                        example: user
                        type: string
                      updatedAt:
                        example: '2023-10-18T07:35:35.304Z'
                        type: string
                      userType:
                        example: local
                        type: string
                      wallet:
                        properties:
                          balance:
                            example: 0
                            type: integer
                        type: object
                    type: object
                  id:
                    example: 65b9d0e92c9f0e3a1c0663b6
                    type: string
                type: object
          description: Successfully unfollowed the store
      security:
      - bearerAuth: []
      summary: Unfollow a store
      tags:
      - Follow
  /follow/{followed}:
    get:
      parameters:
      - description: ID of the user/store to check if followed
        in: path
        name: followed
        required: true
        schema:
          format: objectId
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    example: true
                    type: boolean
                type: object
          description: Successfully retrieved following status
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Get a user's following status
      tags:
      - Follow
  /google-analytics:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                from:
                  description: Start date for the analytics data
                  example: '2020-04-03'
                  format: date
                  type: string
                metrics:
                  items:
                    properties:
                      name:
                        description: Name of the metric to be fetched from Google
                          Analytics
                        example: itemsCheckedOut
                        type: string
                    type: object
                  type: array
                to:
                  description: End date for the analytics data
                  example: '2023-12-31'
                  format: date
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      itemsCheckOut:
                        example: 183
                        type: integer
                    type: object
                  message:
                    example: ok
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successfully retrieved analytics data
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
      - bearerAuth: []
      summary: Perform Google Analytics
      tags:
      - Google Analytics
  /group-buy:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                endDate:
                  description: End date for the group buy
                  example: '2023-02-28'
                  format: date
                  type: string
                groupSalePrice:
                  description: Sale price for the group buy
                  example: 50.0
                  type: number
                limit:
                  description: Limit for the group buy
                  example: 100
                  type: number
                maxSubscription:
                  description: Maximum number of subscriptions
                  example: 20
                  type: number
                minSubscription:
                  description: Minimum number of subscriptions
                  example: 5
                  type: number
                productId:
                  description: ID of the product associated with the group buy
                  example: 5fd0b0f530a3c1369e0c0ecf
                  format: objectId
                  type: string
                startDate:
                  description: Start date for the group buy
                  example: '2023-01-31'
                  format: date
                  type: string
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  __v: 0
                  buyAbleProduct: 0
                  createdAt: '2024-01-31T06:38:45.925Z'
                  discount: 53
                  endDate: '2024-02-07T12:21:56.000Z'
                  groupSalePrice: 400
                  id: 65b9eaf56cc51444945edecc
                  inStock: 186
                  limit: 1
                  maxSubscription: 2
                  minSubscription: 1
                  productId:
                    id: 60460e13e6ff0302c639e5ea
                    mainImage: https://bazar-247.s3.us-east-2.amazonaws.com/1615205868081cartoon-bath-towel.jpg
                    onSale: true
                    price: 100
                    productName: Cartoon Bath Towel Blue
                    regularPrice: 849
                    salePrice: 100
                    slug: Cartoon-Bath-Towel-Blue-tYoipx
                  remainingProduct: 1
                  sellerId:
                    fullname: The Babies Store
                    sellerDetail:
                      approved: true
                      brandName: The Babies Store
                      costCode: false
                      country: Pakistan
                      description: '&lt;p>The Babies Store&lt;/p>'
                      images:
                      - https://cdn.bazaarghar.com/1617207125194the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207125209the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207139351the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207150743the-babies-store.jpg
                      market:
                        __v: 0
                        createdAt: '2021-03-26T08:54:32.554Z'
                        description: Desi Bazar brings you a wide range of Products
                          that were not available before online
                        image: https://bazar-247.s3.us-east-2.amazonaws.com/1617095800069local-banner.png
                        name: 'Bazaar '
                        subMarkets:
                        - __v: 0
                          createdAt: '2021-03-26T08:57:31.728Z'
                          description: 'Bazaarghar brings you Zainab Market with a
                            wide range of Products that were not available online
                            before '
                          id: 605da1e736c5f4023c12d8a0
                          image: https://bazar-247.s3.us-east-2.amazonaws.com/1616752686295zainabbazaar.jpg
                          lang:
                            ar:
                              description: 'testing '
                              name: test
                          mainMarket: 605da14836c5f4023c12d89f
                          name: 'Zainab Market '
                          subMarkets: []
                          type: sub
                          updatedAt: '2023-11-07T07:50:28.408Z'
                        type: main
                        updatedAt: '2021-03-30T09:16:58.487Z'
                  startDate: '2024-02-01T11:50:02.000Z'
                  status: pending
                  updatedAt: '2024-01-31T06:38:45.925Z'
                message: responseMessages.ok
                status: 200
          description: Successfully created a group buy
      security:
      - bearerAuth: []
      summary: Create a new group buy
      tags:
      - Group Buy
  /group-buy/crone/status-update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                auth:
                  description: Authentication token for the crone job
                  example: your_auth_token
                  type: string
              type: object
        required: true
      responses:
        200:
          description: Successfully updated group buy statuses
      summary: Update group buy statuses using crone job
      tags:
      - Group Buy
  /group-buy/deals:
    get:
      parameters:
      - description: Limit the number of results
        example: 10
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number for pagination
        example: 1
        in: query
        name: page
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  limit: 10
                  page: 1
                  result: []
                  totalPages: 0
                  totalResults: 0
                message: ok
                status: 200
          description: Successfully retrieved customer group buy details
      summary: Get customer group buy details
      tags:
      - Group Buy
  /group-buy/{groupId}:
    get:
      parameters:
      - description: ID of the group buy to get details
        in: path
        name: groupId
        required: true
        schema:
          format: objectId
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  __v: 0
                  buyAbleProduct: 0
                  createdAt: '2024-01-31T06:38:45.925Z'
                  discount: 53
                  endDate: '2024-02-07T12:21:56.000Z'
                  groupSalePrice: 400
                  id: 65b9eaf56cc51444945edecc
                  inStock: 186
                  limit: 1
                  maxSubscription: 2
                  minSubscription: 1
                  productId:
                    id: 60460e13e6ff0302c639e5ea
                    mainImage: https://bazar-247.s3.us-east-2.amazonaws.com/1615205868081cartoon-bath-towel.jpg
                    onSale: true
                    price: 100
                    productName: Cartoon Bath Towel Blue
                    regularPrice: 849
                    salePrice: 100
                    slug: Cartoon-Bath-Towel-Blue-tYoipx
                  remainingProduct: 1
                  sellerId:
                    fullname: The Babies Store
                    sellerDetail:
                      approved: true
                      brandName: The Babies Store
                      costCode: false
                      country: Pakistan
                      description: '&lt;p>The Babies Store&lt;/p>'
                      images:
                      - https://cdn.bazaarghar.com/1617207125194the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207125209the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207139351the-babies-store.jpg
                      - https://cdn.bazaarghar.com/1617207150743the-babies-store.jpg
                      market:
                        __v: 0
                        createdAt: '2021-03-26T08:54:32.554Z'
                        description: Desi Bazar brings you a wide range of Products
                          that were not available before online
                        image: https://bazar-247.s3.us-east-2.amazonaws.com/1617095800069local-banner.png
                        name: 'Bazaar '
                        subMarkets:
                        - __v: 0
                          createdAt: '2021-03-26T08:57:31.728Z'
                          description: 'Bazaarghar brings you Zainab Market with a
                            wide range of Products that were not available online
                            before '
                          id: 605da1e736c5f4023c12d8a0
                          image: https://bazar-247.s3.us-east-2.amazonaws.com/1616752686295zainabbazaar.jpg
                          lang:
                            ar:
                              description: 'testing '
                              name: test
                          mainMarket: 605da14836c5f4023c12d89f
                          name: 'Zainab Market '
                          subMarkets: []
                          type: sub
                          updatedAt: '2023-11-07T07:50:28.408Z'
                        type: main
                        updatedAt: '2021-03-30T09:16:58.487Z'
                  startDate: '2024-02-01T11:50:02.000Z'
                  status: pending
                  updatedAt: '2024-01-31T06:38:45.925Z'
                message: responseMessages.ok
                status: 200
          description: Successfully retrieved group buy details by ID
        404:
          description: Group buy not found
      security:
      - bearerAuth: []
      summary: Get group buy details by ID
      tags:
      - Group Buy
  /group-buy/{groupId}/subscribe:
    post:
      parameters:
      - description: ID of the group buy to subscribe to
        in: path
        name: groupId
        required: true
        schema:
          format: objectId
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                quantity:
                  description: Number of subscriptions
                  example: 1
                  type: number
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  groupId: groupId
                  quantity: 1
                message: responseMessages.success
                status: 200
          description: Successfully subscribed to group buy
        404:
          description: Group buy not found
      security:
      - bearerAuth: []
      summary: Subscribe to a group buy
      tags:
      - Group Buy
  /markets:
    post:
      requestBody:
        content:
          application/json:
            example:
              description: Market Description
              lang:
                en:
                  description: Market Description
                  name: Market Name
              mainMarket: 605da14836c5f4023c12d89f
              name: Market Name
            schema:
              $ref: '#/components/schemas/createMarket'
        required: true
      responses:
        200:
          description: Successfully created a new market
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Create a new market
      tags:
      - Markets
  /markets/getAllMarkets:
    get:
      responses:
        200:
          description: Successfully retrieved the list of all markets
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      summary: Get list of all markets
      tags:
      - Markets
  /markets/getmarketbyslug/{slug}:
    get:
      parameters:
      - description: Slug of the market to get details
        in: path
        name: slug
        required: true
        schema:
          type: string
      responses:
        200:
          description: Market details by slug
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      summary: Get market details by slug
      tags:
      - Markets
  /markets/{marketId}:
    delete:
      parameters:
      - description: ID of the market to delete
        in: path
        name: marketId
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully deleted the market
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Delete market by ID
      tags:
      - Markets
    get:
      parameters:
      - description: ID of the market to get details
        in: path
        name: marketId
        required: true
        schema:
          type: string
      responses:
        200:
          description: Market details by ID
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      summary: Get market details by ID
      tags:
      - Markets
    patch:
      parameters:
      - description: ID of the market to update
        in: path
        name: marketId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: Updated Market Description
              lang:
                en:
                  description: Updated Market Description
                  name: Updated Market Name
              name: Updated Market Name
            schema:
              $ref: '#/components/schemas/updateMarket'
        required: true
      responses:
        200:
          description: Market updated successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Update market details by ID
      tags:
      - Markets
    post:
      parameters:
      - description: ID of the market to upload images
        in: path
        name: marketId
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  format: binary
                  type: string
                removeImages:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        200:
          description: Successfully uploaded images for the market
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Upload images for a market
      tags:
      - Markets
  /order:
    get:
      parameters:
      - description: ID of the order
        in: query
        name: orderId
        schema:
          type: string
      - description: ID of the order detail
        in: query
        name: orderDetail
        schema:
          type: string
      - description: ID of the customer
        in: query
        name: customer
        schema:
          type: string
      - description: ID of the seller
        in: query
        name: seller
        schema:
          type: string
      - description: Order status
        in: query
        name: status
        schema:
          type: string
      - description: Start date for filtering
        in: query
        name: from
        schema:
          format: date
          type: string
      - description: End date for filtering
        in: query
        name: to
        schema:
          format: date
          type: string
      - description: Sorting order
        in: query
        name: sortBy
        schema:
          type: string
      - description: Number of items per page
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Successfully retrieved all orders
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get all orders
      tags:
      - Orders
  /order/admin:
    get:
      parameters:
      - description: ID of the order
        in: query
        name: orderId
        schema:
          type: string
      - description: ID of the order detail
        in: query
        name: orderDetail
        schema:
          type: string
      - description: ID of the customer
        in: query
        name: customer
        schema:
          type: string
      - description: ID of the seller
        in: query
        name: seller
        schema:
          type: string
      - description: Order status
        in: query
        name: status
        schema:
          type: string
      - description: Start date for filtering
        in: query
        name: from
        schema:
          format: date
          type: string
      - description: End date for filtering
        in: query
        name: to
        schema:
          format: date
          type: string
      - description: Sorting order
        in: query
        name: sortBy
        schema:
          type: string
      - description: Number of items per page
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Successfully retrieved admin orders
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get admin orders
      tags:
      - Orders
  /order/customerOrders:
    get:
      parameters:
      - description: ID of the customer
        in: query
        name: customer
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Successfully retrieved customer orders
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get customer orders
      tags:
      - Orders
  /order/seller:
    get:
      parameters:
      - description: ID of the order
        in: query
        name: orderId
        schema:
          type: string
      - description: ID of the order detail
        in: query
        name: orderDetail
        schema:
          type: string
      - description: ID of the customer
        in: query
        name: customer
        schema:
          type: string
      - description: Order status
        in: query
        name: status
        schema:
          type: string
      - description: Start date for filtering
        in: query
        name: from
        schema:
          format: date
          type: string
      - description: End date for filtering
        in: query
        name: to
        schema:
          format: date
          type: string
      - description: Sorting order
        in: query
        name: sortBy
        schema:
          type: string
      - description: Number of items per page
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Successfully retrieved seller orders
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get seller orders
      tags:
      - Orders
  /order/{orderId}:
    get:
      parameters:
      - description: ID of the order to get details
        in: path
        name: orderId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successfully retrieved order details by ID
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
  /orderDetail:
    delete:
      responses:
        '204':
          description: Order details deleted successfully
        '401':
          description: Unauthorized
      security:
      - bearerAuth: []
      summary: Delete all order details
      tags:
      - Order detail
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    item:
                      type: string
                    orderId:
                      type: string
                    quantity:
                      type: integer
                  type: object
                type: array
          description: List of order details
        '401':
          description: Unauthorized
      security:
      - bearerAuth: []
      summary: Get order details
      tags:
      - Order detail
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                item:
                  type: string
                quantity:
                  type: integer
              required:
              - item
              - quantity
              type: object
        required: true
      responses:
        '201':
          description: Order detail created successfully
        '401':
          description: Unauthorized
      security:
      - bearerAuth: []
      summary: Create a new order detail
      tags:
      - Order detail
  /orderDetail/{orderDetailId}:
    patch:
      parameters:
      - description: The ID of the order detail to update
        in: path
        name: orderDetailId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                item:
                  type: string
                quantity:
                  type: integer
              required:
              - item
              - quantity
              type: object
        required: true
      responses:
        '200':
          description: Order detail updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Order detail not found
      security:
      - bearerAuth: []
      summary: Update an order detail by ID
      tags:
      - Order detail
  /products:
    get:
      description: Retrieve all products for the supplier.
      parameters:
      - description: Product name
        in: query
        name: productName
        schema:
          type: string
      - description: Product category
        in: query
        name: category
        schema:
          type: string
      - description: Filter products on sale
        in: query
        name: onSale
        schema:
          type: boolean
      - description: Product status
        in: query
        name: active
        schema:
          type: boolean
      - description: Sort in the format field:desc/asc (e.g., name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Maximum number of products
        in: query
        name: limit
        schema:
          default: 10
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  page:
                    example: 1
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/Product'
                    type: array
                  totalPages:
                    example: 1
                    type: integer
                  totalResults:
                    example: 1
                    type: integer
                type: object
          description: OK
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get all products of the seller
      tags:
      - Products
    post:
      description: Only suppliers can create a product.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPost'
          description: Created
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Create a Mainproduct
      tags:
      - Products
  /products/admin/search-collection:
    post:
      description: Endpoint to create or update a search collection in Typesense.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCollectionSchema'
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                  message:
                    example: ok
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successful operation
      security:
      - bearerAuth: []
      summary: Create search collection
      tags:
      - Products
  /products/admin/sync-typesense:
    get:
      description: Endpoint to synchronize products with Typesense.
      parameters:
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      - description: Number of items per page
        in: query
        name: limit
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                  message:
                    type: string
                  status:
                    type: integer
                type: object
          description: Successful operation
      security:
      - bearerAuth: []
      summary: Sync products with Typesense
      tags:
      - Products
  /products/admin/videoupload:
    post:
      description: Upload product videos.
      responses:
        200:
          content:
            application/json:
              schema:
                example:
                  data: null
                  isSuccess: true
                  message: ok
                  status: 200
                properties:
                  data:
                    type: object
                  isSuccess:
                    type: boolean
                  message:
                    type: string
                  status:
                    type: integer
                type: object
          description: OK
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        404:
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Admin can upload product videos
      tags:
      - Products
  /products/analytics/{productId}:
    get:
      parameters:
      - description: ID of the product for analytics
        in: path
        name: productId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                purchases: 150
                views: 1200
          description: Successfully retrieved product analytics
      summary: Get product analytics by ID
      tags:
      - Products
  /products/attributes:
    get:
      responses:
        200:
          content:
            application/json:
              example:
                attributes:
                - attribute: color
                  values:
                  - red
                  - blue
                  - green
          description: Successfully retrieved product attributes
      security:
      - bearerAuth: []
      summary: Get product attributes
      tags:
      - Products
  /products/featuredProducts:
    delete:
      parameters:
      - description: ID of the product to remove from featured
        in: query
        name: productId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                message: Product removed from featured successfully
          description: Product removed from featured list successfully
      security:
      - bearerAuth: []
      summary: Remove a product from the featured list
      tags:
      - Products
  /products/translate:
    get:
      parameters:
      - description: ID of the product to translate
        in: query
        name: productId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                translation:
                  description: Translated Description
                  productName: Translated Name
          description: Successfully translated product details
      security:
      - bearerAuth: []
      summary: Translate product details
      tags:
      - Products
  /products/typesense-search:
    get:
      description: Endpoint to search for products using the Typesense search engine.
      parameters:
      - description: Search query
        in: query
        name: q
        schema:
          type: string
      - description: Field to search within
        in: query
        name: query_by
        schema:
          type: string
      - description: Facet query
        in: query
        name: facet_query
        schema:
          type: string
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
      - description: Field to facet by
        in: query
        name: facet_by
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      facet_counts:
                        items:
                          properties:
                            counts:
                              items:
                                properties:
                                  count:
                                    type: integer
                                  highlighted:
                                    type: string
                                  value:
                                    type: string
                                type: object
                              type: array
                            field_name:
                              type: string
                            sampled:
                              type: boolean
                            stats:
                              properties:
                                total_values:
                                  type: integer
                              type: object
                          type: object
                        type: array
                      found:
                        type: integer
                      hits:
                        items:
                          properties:
                            document:
                              $ref: '#/components/schemas/Product'
                            highlight:
                              type: object
                            highlights:
                              items:
                                type: object
                              type: array
                          type: object
                        type: array
                      out_of:
                        type: integer
                      page:
                        type: integer
                      request_params:
                        properties:
                          collection_name:
                            type: string
                          per_page:
                            type: integer
                          q:
                            type: string
                        type: object
                      search_cutoff:
                        type: boolean
                      search_time_ms:
                        type: integer
                    type: object
                  message:
                    type: string
                  status:
                    type: integer
                type: object
          description: Successful operation
      summary: Search products using Typesense
      tags:
      - Products
  /products/vector-search:
    get:
      description: Semantic vector search based on the query.
      parameters:
      - description: Query string for semantic search
        in: query
        name: query
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ProductSearchResult'
                    type: array
                  message:
                    example: OK
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Successful operation
        '400':
          description: Bad request - missing or invalid query parameter
        '500':
          description: Internal server error
      summary: Perform a vector search
      tags:
      - Products
  /products/{productId}:
    delete:
      parameters:
      - description: ID of the product to delete
        in: path
        name: productId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                message: Product deleted successfully
          description: Successfully deleted product
      summary: Delete product by ID
      tags:
      - Products
    get:
      parameters:
      - description: ID of the product to retrieve
        in: path
        name: productId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                product:
                  name: Product Name
                  price: 99.99
                  productId: '1'
          description: Successfully retrieved product details
      summary: Get product details by ID
      tags:
      - Products
    patch:
      parameters:
      - description: ID of the product to update
        in: path
        name: productId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                productData:
                  example:
                    name: Updated Product Name
                    price: 109.99
                  type: object
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                message: Product updated successfully
          description: Successfully updated product
      summary: Update product by ID
      tags:
      - Products
  /qa:
    get:
      description: Endpoint to retrieve all questions.
      parameters:
      - description: Filter by product name.
        in: query
        name: productName
        schema:
          type: string
      - description: Filter by product ID.
        in: query
        name: productId
        schema:
          type: string
      - description: Limit the number of results.
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number for pagination.
        in: query
        name: page
        schema:
          type: integer
      - description: Sort by a specific field.
        in: query
        name: sortBy
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  limit: 2
                  page: 2
                  results:
                  - brandId: 61b6f991719dc404d8f78202
                    brandName: supplier
                    createdAt: '2022-11-25T05:44:53.465Z'
                    id: 63805655ed811619ac22c75e
                    productId: 60465a25e6ff0302c639e698
                    question: Testing
                    userId: 60b63b47de13d03759b7016f
                  totalPages: 4
                  totalResults: 7
                isSuccess: true
                message: Questions found
                status: 200
          description: List of questions.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid parameters.
                statusCode: 400
          description: Bad request.
      summary: Get all questions
      tags:
      - Q&A
    post:
      description: Endpoint to create a new question.
      requestBody:
        content:
          application/json:
            example:
              productId: 60465a25e6ff0302c639e698
              question: Is there another color
            schema:
              $ref: '#/components/schemas/CreateQuestion'
        required: true
      responses:
        201:
          content:
            application/json:
              example:
                data:
                  brandId: 60649f24e8f1d43f3746716e
                  brandName: The Babies Store
                  createdAt: '2024-02-06T05:35:33.894Z'
                  id: 65c1c525e230ec0a30d818c9
                  productId: 60465a25e6ff0302c639e698
                  productName: Cars Carry Nests
                  question: Quality?
                  sellerId: 6045d047513d358144a144bf
                  updatedAt: '2024-02-06T05:35:33.894Z'
                  userId: 60b63b47de13d03759b7016f
                  userName: safi siddiqui
                  visible: true
                isSuccess: true
                message: Question created
                status: 200
          description: Question created successfully.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Body not found.
                statusCode: 400
          description: Bad request. Body not found.
      security:
      - bearerAuth: []
      summary: Create a new question
      tags:
      - Q&A
  /qa/admin:
    get:
      description: Endpoint to retrieve all admin questions.
      parameters:
      - description: Filter by product name.
        in: query
        name: productName
        schema:
          type: string
      - description: Filter by product ID.
        in: query
        name: productId
        schema:
          type: string
      - description: Filter by brand name.
        in: query
        name: brandName
        schema:
          type: string
      - description: Filter by user name.
        in: query
        name: userName
        schema:
          type: string
      - description: Limit the number of results.
        in: query
        name: limit
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  limit: 2
                  page: 2
                  results:
                  - brandId: 61b6f991719dc404d8f78202
                    brandName: supplier
                    createdAt: '2022-11-25T05:44:53.465Z'
                    id: 63805655ed811619ac22c75e
                    productId: 60465a25e6ff0302c639e698
                    question: Testing
                    userId: 60b63b47de13d03759b7016f
                  totalPages: 4
                  totalResults: 7
                isSuccess: true
                message: Questions found
                status: 200
          description: List of questions.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid parameters.
                statusCode: 400
          description: Bad request.
      security:
      - bearerAuth: []
      summary: Get all admin questions
      tags:
      - Q&A
  /qa/{id}:
    delete:
      description: Endpoint to delete a question by its ID.
      parameters:
      - description: ID of the question to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                isSuccess: true
                message: Question deleted
                status: 200
          description: Question deleted successfully.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID.
                statusCode: 400
          description: Bad request.
      security:
      - bearerAuth: []
      summary: Delete a question by ID
      tags:
      - Q&A
    get:
      description: Endpoint to retrieve a question by its ID.
      parameters:
      - description: ID of the question to retrieve.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  brandName: The Babies Store
                  createdAt: '2024-02-06T05:35:33.894Z'
                  id: 65c1c525e230ec0a30d818c9
                  productId: 60465a25e6ff0302c639e698
                  productName: Cars Carry Nests
                  question: Quality?
                  userId: 60b63b47de13d03759b7016f
                  visible: true
                isSuccess: true
                message: Question found
                status: 200
          description: Question retrieved successfully.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Body not found.
                statusCode: 400
          description: Bad request.
      security:
      - bearerAuth: []
      summary: Get a question by ID
      tags:
      - Q&A
    patch:
      description: Endpoint to create an answer for a question.
      parameters:
      - description: ID of the question to answer.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              answer: 'Yes'
            schema:
              $ref: '#/components/schemas/CreateAnswer'
        required: true
      responses:
        201:
          content:
            application/json:
              example:
                data:
                  answer: 'Yes'
                  productId: 60465a25e6ff0302c639e698
                  productName: Cars Carry Nests
                  question: Quality?
                  visible: true
                isSuccess: true
                message: Answer created
                status: 200
          description: Answer created successfully.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Body not found.
                statusCode: 400
          description: Bad request.
      security:
      - bearerAuth: []
      summary: Create an answer for a question
      tags:
      - Q&A
  /redeem:
    get:
      description: Retrieve all redeem vouchers with filters.
      parameters:
      - description: Voucher ID
        in: query
        name: voucherId
        schema:
          type: string
      - description: User ID
        in: query
        name: userId
        schema:
          type: string
      - description: Voucher
        in: query
        name: voucher
        schema:
          type: string
      - description: End date for filtering vouchers
        in: query
        name: to
        schema:
          format: date
          type: string
      - description: Start date for filtering vouchers
        in: query
        name: from
        schema:
          format: date
          type: string
      - description: Voucher status
        in: query
        name: status
        schema:
          type: string
      - description: Sort by field in the form of field:desc/asc (ex. name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Maximum number of vouchers to retrieve
        in: query
        name: limit
        schema:
          default: 10
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  page:
                    example: 1
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/RedeemVoucher'
                    type: array
                  totalPages:
                    example: 1
                    type: integer
                  totalResults:
                    example: 1
                    type: integer
                type: object
          description: Successfully retrieved vouchers
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get Redeem voucher
      tags:
      - RedeemVoucher
  /report:
    get:
      description: Endpoint to retrieve all admin reports.
      parameters:
      - description: Filter by report type.
        in: query
        name: type
        schema:
          type: string
      - description: Filter by report type ID.
        in: query
        name: typeId
        schema:
          type: string
      - description: Filter by user ID.
        in: query
        name: userId
        schema:
          type: string
      - description: Filter by main reference.
        in: query
        name: mainRef
        schema:
          type: string
      - description: Limit the number of results per page.
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number.
        in: query
        name: page
        schema:
          type: integer
      - description: Sort the results by a specific field.
        in: query
        name: sortBy
        schema:
          type: string
      - description: Filter by end date.
        in: query
        name: to
        schema:
          format: date-time
          type: string
      - description: Filter by start date.
        in: query
        name: from
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      limit:
                        example: 10
                        type: integer
                      page:
                        example: 1
                        type: integer
                      results:
                        items:
                          $ref: '#/components/schemas/ReportResponse'
                        type: array
                      totalPages:
                        example: 5
                        type: integer
                      totalResults:
                        example: 50
                        type: integer
                    type: object
                  isSuccess:
                    example: true
                    type: boolean
                  message:
                    example: Reports retrieved successfully
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: List of reports.
        '400':
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid parameters.
                statusCode: 400
          description: Bad request. Invalid parameters.
      security:
      - bearerAuth: []
      summary: Get all admin reports
      tags:
      - Reports
    post:
      description: Endpoint to create a new report.
      requestBody:
        content:
          application/json:
            example:
              comment: This is a sample comment.
              type: QA
              typeId: 60465a25e6ff0302c639e698
            schema:
              $ref: '#/components/schemas/CreateReport'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ReportResponse'
                  isSuccess:
                    example: true
                    type: boolean
                  message:
                    example: Report created successfully
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Report action created successfully.
        '400':
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID or action.
                statusCode: 400
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Create a new report
      tags:
      - Reports
  /report/{id}:
    get:
      description: Endpoint to retrieve a report by its ID.
      parameters:
      - description: ID of the report to retrieve.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ReportResponse'
                  isSuccess:
                    example: true
                    type: boolean
                  message:
                    example: Report found
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Report retrieved successfully.
        '400':
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID or action.
                statusCode: 400
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Get a report by ID
      tags:
      - Reports
    patch:
      description: Endpoint to update a report action by its ID.
      parameters:
      - description: ID of the report to update action.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              action: BLOCKED
              reportId: 63805655ed811619ac22c75e
            schema:
              $ref: '#/components/schemas/CreateAction'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ReportResponse'
                  isSuccess:
                    example: true
                    type: boolean
                  message:
                    example: Report action updated successfully
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Report action updated successfully.
        '400':
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID or action.
                statusCode: 400
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Update a report action
      tags:
      - Reports
  /review-stats/{sellerDetailId}/getbysellerdetail:
    get:
      description: 'Retrieve review statistics by seller detail ID.

        This endpoint returns the aggregated review statistics for a specific seller
        detail identified by its ID.

        '
      parameters:
      - description: ID of the seller detail.
        in: path
        name: sellerDetailId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                - _id: 6182702e9350d900327dd625
                  fiveStar: 0
                  fourStar: 0
                  oneStar: 0
                  orderId: 602cb155cc4eb0d2df6544ac
                  sellerDetailId: 612f33fa07bebf0032a02e11
                  sellerId: 5ffecb62695986bee472617c
                  threeStar: 1
                  twoStar: 0
                  typeId: 602cb155cc4eb0d2df6544b1
                message: ok
                status: '200'
              schema:
                properties:
                  data:
                    items:
                      properties:
                        _id:
                          example: 6182702e9350d900327dd625
                          type: string
                        fiveStar:
                          example: 0
                          type: integer
                        fourStar:
                          example: 0
                          type: integer
                        oneStar:
                          example: 0
                          type: integer
                        orderId:
                          example: 602cb155cc4eb0d2df6544ac
                          type: string
                        sellerDetailId:
                          example: 612f33fa07bebf0032a02e11
                          type: string
                        sellerId:
                          example: 5ffecb62695986bee472617c
                          type: string
                        threeStar:
                          example: 1
                          type: integer
                        twoStar:
                          example: 0
                          type: integer
                        typeId:
                          example: 602cb155cc4eb0d2df6544b1
                          type: string
                      type: object
                    type: array
                type: object
          description: Review statistics retrieved successfully.
      summary: Get review statistics by seller detail ID
      tags:
      - Review Stats
  /review-stats/{typeId}:
    get:
      description: 'Retrieve review statistics by type ID.

        This endpoint returns the review statistics for a specific review type identified
        by its ID.

        '
      parameters:
      - description: ID of the review type.
        in: path
        name: typeId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                - _id: 6182702e9350d900327dd625
                  fiveStar: 0
                  fourStar: 0
                  oneStar: 0
                  orderId: 602cb155cc4eb0d2df6544ac
                  sellerDetailId: 612f33fa07bebf0032a02e11
                  sellerId: 5ffecb62695986bee472617c
                  threeStar: 1
                  twoStar: 0
                  typeId: 602cb155cc4eb0d2df6544b1
                message: ok
                status: '200'
              schema:
                properties:
                  data:
                    items:
                      properties:
                        _id:
                          example: 6182702e9350d900327dd625
                          type: string
                        fiveStar:
                          example: 0
                          type: integer
                        fourStar:
                          example: 0
                          type: integer
                        oneStar:
                          example: 0
                          type: integer
                        orderId:
                          example: 602cb155cc4eb0d2df6544ac
                          type: string
                        sellerDetailId:
                          example: 612f33fa07bebf0032a02e11
                          type: string
                        sellerId:
                          example: 5ffecb62695986bee472617c
                          type: string
                        threeStar:
                          example: 1
                          type: integer
                        twoStar:
                          example: 0
                          type: integer
                        typeId:
                          example: 602cb155cc4eb0d2df6544b1
                          type: string
                      type: object
                    type: array
                type: object
          description: Review statistics retrieved successfully.
      summary: Get review statistics by type ID
      tags:
      - Review Stats
  /reviews:
    get:
      description: Retrieve all reviews.
      parameters:
      - description: Product ID
        in: query
        name: product
        schema:
          type: string
      - description: User ID
        in: query
        name: reviewer
        schema:
          type: string
      - description: Rating 1-5
        in: query
        name: rating
        schema:
          maximum: 5
          minimum: 1
          type: integer
      - description: Sort by query in the form of field:desc/asc (e.g., name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Maximum number of reviews
        in: query
        name: limit
        schema:
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  page:
                    example: 1
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/Review'
                    type: array
                  totalPages:
                    example: 1
                    type: integer
                  totalResults:
                    example: 1
                    type: integer
                type: object
          description: OK
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get all reviews
      tags:
      - Reviews
    post:
      description: Only users can create a review.
      requestBody:
        content:
          application/json:
            schema:
              example:
                comment: very good product
                productId: 5ebac534954b54139806c112
                rating: 5
              properties:
                comment:
                  description: Review's comment
                  type: string
                productId:
                  type: string
                rating:
                  description: 1 - 5
                  maximum: 5
                  type: number
              required:
              - productId
              - comment
              - rating
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: Created
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Create a review
      tags:
      - Reviews
  /reviews/{id}:
    delete:
      description: Logged in users can delete only their own reviews. Only admins
        can delete others' reviews.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: No content
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Delete a review
      tags:
      - Reviews
    get:
      description: Fetch a review by ID.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: OK
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Get a review
      tags:
      - Reviews
    patch:
      description: Logged in users can only update their own reviews.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                comment: updated comment
                rating: 5
              properties:
                comment:
                  description: Must be less than 200 characters
                  maxLength: 200
                  type: string
                rating:
                  description: Rating 1-5
                  maximum: 5
                  type: number
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: OK
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '403':
          $ref: '#/components/schemas/Forbidden'
        '404':
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Update a review
      tags:
      - Reviews
  /seller:
    post:
      description: Creates a new seller detail in the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSellerDetailPayload'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Seller detail created successfully
        400:
          $ref: '#/components/schemas/BadRequest'
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        409:
          $ref: '#/components/schemas/DuplicateEmail'
      summary: Create a new seller detail
      tags:
      - Seller
  /seller/{id}:
    delete:
      description: Deletes seller detail by its ID.
      parameters:
      - description: ID of the seller detail to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          description: Seller detail deleted successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
        404:
          $ref: '#/components/schemas/NotFound'
      summary: Delete seller detail by ID
      tags:
      - Seller
    get:
      description: Retrieves seller detail by its ID.
      parameters:
      - description: ID of the seller detail
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Seller detail retrieved successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
        404:
          $ref: '#/components/schemas/NotFound'
      summary: Get seller detail by ID
      tags:
      - Seller
    put:
      description: Updates seller detail by its ID.
      parameters:
      - description: ID of the seller detail to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSellerDetailPayload'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Seller detail updated successfully
        400:
          $ref: '#/components/schemas/BadRequest'
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        404:
          $ref: '#/components/schemas/NotFound'
      summary: Update seller detail by ID
      tags:
      - Seller
  /sellerConfidentialDetail:
    get:
      description: Endpoint to retrieve all seller confidential details.
      parameters:
      - description: Seller ID
        in: query
        name: seller
        schema:
          type: string
      - description: Bank name
        in: query
        name: bankName
        schema:
          type: string
      - description: CNIC number
        in: query
        name: cnic_no
        schema:
          type: string
      - description: Bank account title
        in: query
        name: bankAccountTitle
        schema:
          type: string
      - description: Bank account number
        in: query
        name: bankAccountNumber
        schema:
          type: string
      - description: Sort by field
        in: query
        name: sortBy
        schema:
          type: string
      - description: Limit the number of results
        in: query
        name: limit
        schema:
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: List of seller confidential details.
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get all seller confidential details
      tags:
      - Seller Confidential Details
    post:
      description: Endpoint to create a new seller confidential detail.
      requestBody:
        content:
          application/json:
            example:
              bankAccountNumber: '1234567890'
              bankAccountTitle: John Doe
              bankName: ABC Bank
              cnic_no: '1234567890123'
              seller: 60b63b47de13d03759b7016f
            schema:
              $ref: '#/components/schemas/SellerConfidentialDetailPayload'
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  __v: 0
                  bankAccountNumber: '1234567890'
                  bankAccountTitle: John Doe
                  bankName: ABC Bank
                  cnicImages: []
                  cnic_no: '1234567890123'
                  createdAt: '2024-02-07T06:07:07.997Z'
                  id: 65c31e0bd5c45c07f459687c
                  seller: 654372929fd4ba2dc4751941
                  updatedAt: '2024-02-07T06:07:07.997Z'
                message: ok
                status: 200
          description: Seller confidential detail created successfully.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID or action.
                statusCode: 400
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Create a new seller confidential detail
      tags:
      - Seller Confidential Details
  /sellerConfidentialDetail/{sellerConfidentialDetailId}:
    get:
      description: Retrieve a seller confidential detail by ID.
      parameters:
      - description: Seller confidential detail ID
        in: path
        name: sellerConfidentialDetailId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                data:
                  __v: 0
                  bankAccountNumber: '1234567890'
                  bankAccountTitle: John Doe
                  bankName: ABC Bank
                  cnicImages: []
                  cnic_no: '1234567890123'
                  createdAt: '2024-02-07T06:07:07.997Z'
                  id: 65c31e0bd5c45c07f459687c
                  seller: 654372929fd4ba2dc4751941
                  updatedAt: '2024-02-07T06:07:07.997Z'
                message: ok
                status: 200
          description: Seller confidential detail found.
        400:
          content:
            application/json:
              example:
                error: Bad Request
                message: Invalid ID or action.
                statusCode: 400
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Get seller confidential detail by ID
      tags:
      - Seller Confidential Details
  /sellerDetail:
    get:
      description: Endpoint to retrieve all seller details.
      parameters:
      - description: seller id.
        in: query
        name: seller
        schema:
          type: string
      - in: query
        name: brandName
        schema:
          type: string
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: market
        schema:
          type: string
      - description: Search by name.
        in: query
        name: name
        schema:
          type: string
      - description: Search by value.
        in: query
        name: value
        schema:
          type: string
      - description: Limit the number of results per page.
        in: query
        name: limit
        schema:
          type: number
      - description: Page number.
        in: query
        name: page
        schema:
          type: number
      - description: Sort the results by a specific field.
        in: query
        name: sortBy
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SellerDetailResponse'
                type: array
          description: Return all seller details
      summary: Get all seller details
      tags:
      - Seller Detail
    post:
      description: Endpoint to create a new seller detail.
      requestBody:
        content:
          application/json:
            example:
              address: Example Address
              brandName: Example Brand
              city: Example City
              cityCode: '12345'
              description: Example description
              lang:
                en:
                  brandName: Example Brand
                  description: Example description
              market: 61234abcd567890def123456
              seller: 61234abcd567890def123456
            schema:
              $ref: '#/components/schemas/SellerDetailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Seller detail created successfully
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    example: Bad Request
                    type: string
                  message:
                    example: Invalid ID or action.
                    type: string
                  statusCode:
                    example: 400
                    type: integer
                type: object
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Create a new seller detail
      tags:
      - Seller Detail
  /sellerDetail/admin/{sellerDetailId}/feature:
    patch:
      description: Endpoint to feature a store.
      parameters:
      - in: path
        name: sellerDetailId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                featured:
                  example: true
                  type: boolean
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Successful operation
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    example: Bad Request
                    type: string
                  message:
                    example: Invalid ID or action.
                    type: string
                  statusCode:
                    example: 400
                    type: integer
                type: object
          description: Bad request. Invalid ID or action.
      security:
      - bearerAuth: []
      summary: Feature a Store
      tags:
      - Seller Detail
  /sellerDetail/current:
    get:
      description: Endpoint to retrieve current seller detail.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerDetailResponse'
          description: Return current seller detail
        '401':
          $ref: '#/components/schemas/Unauthorized'
      summary: Get current seller detail
      tags:
      - Seller Detail
  /sellerDetail/get-stores:
    post:
      description: Endpoint to retrieve store details.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SellerDetailResponse'
                type: array
          description: Return store details
      summary: Get store details
      tags:
      - Seller Detail
  /sellerDetail/rrp-generator:
    post:
      description: Endpoint to generate RRP.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rrp:
                    type: string
                type: object
          description: Return generated RRP
        '401':
          $ref: '#/components/schemas/Unauthorized'
      summary: Generate RRP
      tags:
      - Seller Detail
  /sellerDetail/rrp-parser:
    post:
      description: Endpoint to parse RRP.
      requestBody:
        content:
          application/json:
            example:
              storeId: 61234abcd567890def123456
            schema:
              $ref: '#/components/schemas/RrpParserPayload'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  parsedRrp:
                    type: string
                type: object
          description: Return parsed RRP
        '401':
          $ref: '#/components/schemas/Unauthorized'
      summary: Parse RRP
      tags:
      - Seller Detail
  /setting:
    get:
      description: Filter master tables.
      parameters:
      - description: Key parameter for filtering.
        in: query
        name: key
        schema:
          type: string
      - description: KeyValue parameter for filtering.
        in: query
        name: keyValue
        schema:
          type: string
      - description: To parameter for date filtering.
        in: query
        name: to
        schema:
          format: date
          type: string
      - description: From parameter for date filtering.
        in: query
        name: from
        schema:
          format: date
          type: string
      - description: Label parameter for filtering.
        in: query
        name: label
        schema:
          type: string
      - description: Active parameter for filtering.
        in: query
        name: active
        schema:
          type: boolean
      - description: Unit parameter for filtering.
        in: query
        name: unit
        schema:
          type: string
      - description: Name parameter for search filtering.
        in: query
        name: name
        schema:
          type: string
      - description: Value parameter for search filtering.
        in: query
        name: value
        schema:
          type: string
      - description: SortBy parameter for sorting.
        in: query
        name: sortBy
        schema:
          type: string
      - description: Limit parameter for pagination.
        in: query
        name: limit
        schema:
          type: integer
      - description: Page parameter for pagination.
        in: query
        name: page
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterTableResponse'
          description: Successfully filtered tables
      security:
      - bearerAuth: []
      summary: Filter master table
      tags:
      - Setting
    post:
      description: Create a new master table.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/CreateTableResponse'
                  message:
                    example: OK
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Created
      security:
      - bearerAuth: []
      summary: Create a master table
      tags:
      - Setting
  /setting/{tableId}:
    delete:
      description: Delete master table by Id.
      parameters:
      - description: ID of the master table to delete
        in: path
        name: tableId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/CreateTableResponse'
                  message:
                    example: OK
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Deleted
      security:
      - bearerAuth: []
      summary: Delete master table by Id
      tags:
      - Setting
    get:
      description: Get master table by Id.
      parameters:
      - description: ID of the master table
        in: path
        name: tableId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
      security:
      - bearerAuth: []
      summary: Get master table by Id
      tags:
      - Setting
    patch:
      description: Admin and super admin can change the master table.
      parameters:
      - description: ID of the master table to update
        in: path
        name: tableId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableByIdRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/CreateTableResponse'
                  message:
                    example: OK
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: Updated
      security:
      - bearerAuth: []
      summary: Update master table by Id
      tags:
      - Setting
  /users:
    get:
      description: Only admins can retrieve all users.
      parameters:
      - description: User name
        in: query
        name: fullname
        schema:
          type: string
      - description: User role
        in: query
        name: role
        schema:
          type: string
      - description: Sort by field:desc/asc (e.g., name:asc)
        in: query
        name: sortBy
        schema:
          type: string
      - description: Max number of users
        in: query
        name: limit
        schema:
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          minimum: 1
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  limit:
                    type: integer
                  page:
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/User'
                    type: array
                  totalPages:
                    type: integer
                  totalResults:
                    type: integer
                type: object
          description: OK
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Only admins can create other users.
      requestBody:
        content:
          application/json:
            example:
              email: fake@example.com
              fullname: Fake Name
              password: password1
              role: user
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        400:
          description: Duplicate email
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Create a user
      tags:
      - Users
  /users/admin:
    patch:
      description: Add funds to a user's wallet balance (admin only)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  example: 100
                  type: number
                description:
                  example: Adding amount to user's wallet
                  type: string
                userId:
                  example: 65c5d4790e4a4b36445ab5f1
                  type: string
              type: object
        required: true
      responses:
        200:
          description: Funds added successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Add funds to user's wallet
      tags:
      - Users
  /users/change-password:
    put:
      description: Change user's password
      requestBody:
        content:
          application/json:
            schema:
              properties:
                newPassword:
                  example: newP@ssword
                  type: string
                oldPassword:
                  example: oldP@ssword
                  type: string
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  message:
                    example: ok
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: User's password changed successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        404:
          description: User not found
      security:
      - bearerAuth: []
      summary: Change user's password
      tags:
      - Users
  /users/profile:
    get:
      description: Retrieve user profile information based on user role
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                  message:
                    example: User profile retrieved successfully
                    type: string
                  status:
                    example: 200
                    type: integer
                type: object
          description: User profile retrieved successfully
        401:
          description: Unauthorized access
        403:
          description: Forbidden access
        404:
          description: User profile not found
      security:
      - bearerAuth: []
      summary: Get user profile
      tags:
      - Users
  /users/ref-code:
    get:
      description: Retrieve user by their reference code
      parameters:
      - in: query
        name: refCode
        required: true
        schema:
          example: ABC12345
          type: string
      responses:
        200:
          description: User found by reference code
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get user by reference code
      tags:
      - Users
  /users/refcode:
    post:
      description: Update bulk user reference codes
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: Bulk reference codes updated successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Update bulk user reference codes
      tags:
      - Users
    put:
      description: Update user's reference code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refCode:
                  example: ABC12345
                  type: string
              type: object
        required: true
      responses:
        200:
          description: User's reference code updated successfully
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Update user's reference code
      tags:
      - Users
  /users/requested-sellers:
    get:
      description: Only admins can retrieve all requested sellers.
      parameters:
      - description: User name
        in: query
        name: fullname
        schema:
          type: string
      - description: User phone
        in: query
        name: phone
        schema:
          type: string
      - description: User email
        in: query
        name: email
        schema:
          type: string
      - description: Sort by field:desc/asc
        in: query
        name: sortBy
        schema:
          type: string
      - description: Max number of users
        in: query
        name: limit
        schema:
          minimum: 1
          type: integer
      - description: Page number
        in: query
        name: page
        schema:
          minimum: 1
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  limit:
                    type: integer
                  page:
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/User'
                    type: array
                  totalPages:
                    type: integer
                  totalResults:
                    type: integer
                type: object
          description: OK
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get all requested Sellers
      tags:
      - Users
  /users/sellerHome:
    get:
      description: Retrieve user's meta data.
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get seller's home
      tags:
      - Users
  /users/sellers:
    get:
      description: Retrieve a list of sellers
      responses:
        200:
          description: A list of sellers
        401:
          $ref: '#/components/schemas/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get sellers
      tags:
      - Users
  /users/{id}:
    delete:
      description: Logged in users can delete only themselves. Only admins can delete
        other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          description: No content
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        404:
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Logged-in users can fetch only their own information; admins can
        fetch other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
      security:
      - bearerAuth: []
      summary: Get a user
      tags:
      - Users
    patch:
      description: Logged in users can only update their own information. Only admins
        can update other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  description: Must be unique
                  format: email
                  type: string
                fullname:
                  type: string
                password:
                  description: At least one number and one letter
                  format: password
                  minLength: 8
                  type: string
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        400:
          description: Duplicate email error
        401:
          $ref: '#/components/schemas/Unauthorized'
        403:
          $ref: '#/components/schemas/Forbidden'
        404:
          $ref: '#/components/schemas/NotFound'
      security:
      - bearerAuth: []
      summary: Update a user
      tags:
      - Users
  /voucher:
    post:
      summary: Create a voucher
      description: Create a voucher
      tags: [Voucher]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Testing voucher
                startDate:
                  type: string
                  format: date-time
                  example: 2022-01-20T09:37:28.866+00:00
                description:
                  type: string
                  example: fake description
                endDate:
                  type: string
                  format: date-time
                  example: 2022-01-21T09:37:28.866+00:00
                amount:
                  type: number
                  example: 100
                numOfVouchers:
                  type: number
                  example: 100
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
        "404":
          $ref: '#/components/schemas/NotFound'

    get:
      summary: Get all vouchers
      description: Retrieve all vouchers
      tags: [Voucher]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: to
          schema:
            type: string
            format: date
          description: Date to
        - in: query
          name: from
          schema:
            type: string
            format: date
          description: Date from
        - in: query
          name: status
          schema:
            type: string
          description: Voucher status
        - in: query
          name: sortBy
          schema:
            type: string
          description: Sort by query in the form of field:desc/asc (e.g., name:asc)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Maximum number of vouchers
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Voucher'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  totalPages:
                    type: integer
                    example: 1
                  totalResults:
                    type: integer
                    example: 1
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
  /voucher/voucher/{voucher}:
    get:
      summary: Get by voucher
      description: Retrieve a voucher by its identifier
      tags: [Voucher]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: voucher
          required: true
          schema:
            type: string
          description: Voucher
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
        "404":
          $ref: '#/components/schemas/NotFound'

  /voucher/{voucherId}:
    get:
      summary: Get a voucher
      description: Fetch a voucher by ID
      tags: [Voucher]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: voucherId
          required: true
          schema:
            type: string
          description: Voucher ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
        "404":
          $ref: '#/components/schemas/NotFound'

  /voucher/{voucherId}/redeem:
    get:
      summary: Redeem a voucher
      description: Redeem a voucher
      tags: [Voucher]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: voucherId
          required: true
          schema:
            type: string
          description: Voucher ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
        "404":
          $ref: '#/components/schemas/NotFound'

  

    patch:
      summary: Update a voucher
      description: Update a voucher
      tags: [Voucher]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: voucherId
          required: true
          schema:
            type: string
          description: Voucher ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                numOfVouchers:
                  type: integer
                endDate:
                  type: string
                  format: date-time
              example:
                status: expired
                numOfVouchers: 1
                endDate: 2022-01-20T09:37:28.866+00:00
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
        "401":
          $ref: '#/components/schemas/Unauthorized'
        "403":
          $ref: '#/components/schemas/Forbidden'
        "404":
          $ref: '#/components/schemas/NotFound'
  /wishList:
    post:
      summary: Add a product to the wishlist
      description: Allows users to add a product to their wishlist.
      tags:
        - WishList
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToWishList'
      responses:
        '201':
          description: Product successfully added to wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
    get:
      summary: Retrieve wishlist
      description: Retrieves the wishlist for the logged-in user.
      tags:
        - WishList
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's wishlist retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
    delete:
      summary: Empty the wishlist
      description: Removes all products from the user's wishlist.
      tags:
        - WishList
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wishlist successfully emptied

  /wishList/remove:
    post:
      summary: Remove an item from the wishlist
      tags:
        - WishList
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToWishList'
            example:
              product: "5ebac534954b54139806c112"
      responses:
        '200':
          description: Product successfully removed from wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from wishlist successfully"
        '404':
          description: Product not found in wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product not found"
servers:
- description: Development server
  url: http://localhost:3000/V1/docs
 